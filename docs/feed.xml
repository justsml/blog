<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-04T17:40:35-06:00</updated><id>http://localhost:4000/</id><title type="html">www.DanLevy.net</title><subtitle>Devout Developer</subtitle><entry><title type="html">Linux Server Benchmarking Scripts</title><link href="http://localhost:4000/2017/05/01/linux-system-benchmark-scripts/" rel="alternate" type="text/html" title="Linux Server Benchmarking Scripts" /><published>2017-05-01T00:00:00-06:00</published><updated>2017-05-01T00:00:00-06:00</updated><id>http://localhost:4000/2017/05/01/linux-system-benchmark-scripts</id><content type="html" xml:base="http://localhost:4000/2017/05/01/linux-system-benchmark-scripts/">&lt;h1 id=&quot;get-hddcpu-baseline-stats&quot;&gt;Get HDD+CPU Baseline Stats&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# COPY + PASTE THE FOLLOWING TO CREATE FOLDER &amp;amp; MAIN SCRIPT(S)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create folder for results &amp;amp; scripts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BENCH_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/benchmarks
mkdir -p &lt;span class=&quot;nv&quot;&gt;$BENCH_DIR&lt;/span&gt;/results

touch &lt;span class=&quot;nv&quot;&gt;$BENCH_DIR&lt;/span&gt;/bench-library.sh
touch &lt;span class=&quot;nv&quot;&gt;$BENCH_DIR&lt;/span&gt;/run-bench.sh
chmod +x &lt;span class=&quot;nv&quot;&gt;$BENCH_DIR&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.sh

cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; 'EOT' &amp;gt;&amp;gt; $BENCH_DIR/bench-library.sh
#!/bin/bash
set -e

# Install some deps
if [ &quot;$(which sysbench)&quot; == &quot;&quot; -o &quot;$(which inxi)&quot; == &quot;&quot; -o &quot;$(which tcpdump)&quot; == &quot;&quot; ]; then
  apt-get update &amp;amp;&amp;amp; apt-get install -y sysbench inxi htop iotop tcpdump hddtemp
fi
# Variables
export DATE_TAG=`date +%F` #YYYY-MM-DD
export CPU_CORES=&quot;$([ -e /proc/cpuinfo ] &amp;amp;&amp;amp; grep -sc ^processor /proc/cpuinfo || sysctl -n hw.ncpu)&quot;
export BENCH_DIR=$HOME/benchmarks/

mkdir -p $BENCH_DIR

function benchCpu() {
  thread_limit=${1:$CPU_CORES}
  prime_limit=${2:-20000}

  if [ $CPU_CORES -lt `expr 1 + $thread_limit` ]; then
    printf &quot;\n\n${yellow}ALERT: Skipping tests limited by \&quot;${thread_limit} thread test\&quot;\n${cyan}Not enough CPU Cores ($CPU_CORES)  ${reset}\n\n&quot;
  else
    printf &quot;\n\n${yellow}ALERT: Skipping tests limited by \&quot;${thread_limit} thread test\&quot;\n${reset}&quot;
sysbench --test=cpu \
  --cpu-max-prime=1000 \
  --num-threads=1 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=1000 \
  --num-threads=4 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=1000 \
  --num-threads=8 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=1000 \
  --num-threads=16 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=20000 \
  --num-threads=24 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=100000 \
  --num-threads=32 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=200000 \
  --num-threads=48 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=200000 \
  --num-threads=64 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=2000000 \
  --num-threads=96 \
  run | tee -a $BENCH_DIR/results/cpu-test.log

sysbench --test=cpu \
  --cpu-max-prime=500000 \
  --num-threads=96 \
  run | tee -a $BENCH_DIR/results/cpu-test.log




sysbench --test=cpu \
  --cpu-max-prime=${prime_limit} \
  --num-threads=${CPU_CORES} \
  run | tee -a $BENCH_DIR/results/cpu-test.log
  fi
}

# benchDisk - tests random read &amp;amp; write, and sequential r, and sequential write, before final cleanup.
function benchDisk() {
  #   Generates test files - up to 80% of your free space - in local dir, then runs the 3 tests (up to 20 minutes each)
  # tests=${1:rndrw,seqrd,seqwr}
  freeSpace=`df -kh . | tail -1 | awk '{print $4}'`
  freeSpace=&quot;${freeSpace//G/}&quot;
  # Get 80% of available space (from current dir)
  testSize=$(awk &quot;BEGIN {print $freeSpace * 0.8; exit}&quot;)
  testSize=${testSize}G

  printf &quot;####&amp;gt;&amp;gt;&amp;gt; \nWriting $testSize test data to ${PWD}...\n&quot;

  # echo 'Starting' | tee -a $BENCH_DIR/results/sysbench-debug.log

  # sysbench --test=fileio cleanup
sysbench --test=fileio \
  --num-threads=${CPU_CORES} --file-total-size=60G \
  prepare
# do Rand R+W, Sequential Read AND Seq. Write
sysbench --test=fileio --init-rng=on \
  --file-test-mode=seqrd --file-block-size=64K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=40G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

sysbench --test=fileio --init-rng=on \
  --file-test-mode=seqrd --file-block-size=8K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=40G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

sysbench --test=fileio --init-rng=on \
  --file-test-mode=seqwr --file-block-size=64K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=60G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

sysbench --test=fileio --init-rng=on \
  --file-test-mode=seqwr --file-block-size=8K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=60G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

sysbench --test=fileio --init-rng=on \
  --file-test-mode=rndrd --file-block-size=64K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=60G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

sysbench --test=fileio --init-rng=on \
  --file-test-mode=rndrw --file-block-size=64K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=60G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log


sysbench --test=fileio --init-rng=on \
  --file-test-mode=rndwr --file-block-size=64K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=60G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

sysbench --test=fileio --init-rng=on \
  --file-test-mode=rndrd --file-block-size=8K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=60G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

sysbench --test=fileio --init-rng=on \
  --file-test-mode=rndwr --file-block-size=8K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=60G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

sysbench --test=fileio --init-rng=on \
  --file-test-mode=rndrw --file-block-size=8K \
  --num-threads=${CPU_CORES} --max-time=120 --file-total-size=60G \
  --max-requests=0 run | tee -a $BENCH_DIR/results/sysbench-fileio.log

  # sysbench --test=fileio cleanup

  printf &quot;\n\n####&amp;gt;&amp;gt;&amp;gt; \nCOMPLETED TESTS! Great Success!!! \n\n\n&quot;
}

EOT

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;###### CREATE RUN SCRIPT&lt;/span&gt;
cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; 'EOT' &amp;gt;&amp;gt; tee $BENCH_DIR/run-bench.sh
#!/bin/bash
set -e

source ./bench-library.sh

# Benchmark HDD Speed (in Current Directory)
###########
benchDisk

# Benchmark CPU - trying different thread counts (and work sizes)
# It'll automatically skip test if we don't have enough cores (to have an impact)
# NB: results comparable between different hardware - up to their same CPU CORE #.
###########
benchCpu 1
benchCpu 4
benchCpu 8  50000
benchCpu 12 100000
benchCpu 16 100000
benchCpu 32 250000
benchCpu 48 500000
benchCpu 64 2000000

EOT

&lt;/span&gt;chmod +x &lt;span class=&quot;nv&quot;&gt;$BENCH_DIR&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.sh





&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;usage-examples&quot;&gt;Usage Examples:&lt;/h2&gt;

&lt;p&gt;Make sure to &lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/benchmarks/bench-library.sh&lt;/code&gt; before running the following commands manually.&lt;/p&gt;

&lt;h1 id=&quot;io---live-monitor&quot;&gt;I/O - Live Monitor&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;System: iotop&lt;/li&gt;
  &lt;li&gt;Per command: dtrace/ltrace/strace&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="benchmarks" /><category term="servers" /><category term="performance" /><summary type="html">Get HDD+CPU Baseline Stats</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-2.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">Cloud Tuning: Gain a 70% Boost</title><link href="http://localhost:4000/2017/04/15/boost-your-cloud-70-percent-aws-gce-azure-cloud/" rel="alternate" type="text/html" title="Cloud Tuning: Gain a 70% Boost" /><published>2017-04-15T00:00:00-06:00</published><updated>2017-04-15T00:00:00-06:00</updated><id>http://localhost:4000/2017/04/15/boost-your-cloud-70-percent-aws-gce-azure-cloud</id><content type="html" xml:base="http://localhost:4000/2017/04/15/boost-your-cloud-70-percent-aws-gce-azure-cloud/">&lt;h1 id=&quot;boost-cloud-performance-up-to-70&quot;&gt;Boost Cloud Performance up to 70%&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;General notes &amp;amp; sections for select hosting providers below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#aws_tips&quot;&gt;AWS (Amazon Web Services), EC2 (Elastic Compute Cloud), EBS (Elastic Block Storage),  etc.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#do_tips&quot;&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#packet_tips&quot;&gt;Packet.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&quot;aws_tips&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;amazon-web-services--ec2--ebs--s3&quot;&gt;Amazon Web Services / EC2 / EBS / S3&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;TLDR; AWS features restrictive hardware &amp;amp; pricing tiers.
The &lt;strong&gt;i3&lt;/strong&gt; hardware series is the only type I would consider from a Price/performance (and absolute performance) perspective.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;iframe style=&quot;margin-left: -50%;&quot; width=&quot;1257.9607023411372&quot; height=&quot;777.8727573309395&quot; seamless=&quot;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://docs.google.com/spreadsheets/d/1qQ62m1RFj73YScdS77Q9R2GpRqJOk7JHuTEOFDR4jJE/pubchart?oid=13370750&amp;amp;format=interactive&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/397632/25599756/081d0572-2e9c-11e7-855b-12b695f1494b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note the &lt;strong&gt;i3.*xlarge&lt;/strong&gt; is the only hardware to feature competitively priced NVMe storage (ultra-fast +1GB/s speeds). The major limiting factor I found was the real network speed. Servers with advertised speeds “up to 10/Gb/s” struggled to get close to 1/Gb/s (60-80MB/s).&lt;/p&gt;

&lt;p&gt;Network tests used up to 9 additional instances in the same availability zone. Any erroneous data points I replaced with a 0. Additional tests are needed as only 1-2 samples were collected.&lt;/p&gt;

&lt;h2 id=&quot;head-to-head&quot;&gt;Head to Head&lt;/h2&gt;

&lt;iframe style=&quot;margin-left: -50%;&quot; width=&quot;1004.51&quot; height=&quot;620.9271970262294&quot; seamless=&quot;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://docs.google.com/spreadsheets/d/1qQ62m1RFj73YScdS77Q9R2GpRqJOk7JHuTEOFDR4jJE/pubchart?oid=116848524&amp;amp;format=interactive&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ec2instances.info/?region=us-west-2&amp;amp;cost_duration=monthly&amp;amp;selected=t2.nano,t2.micro,t1.micro,t2.small,m1.small,t2.medium,m3.medium,m1.medium,t2.large,c4.large,c3.large,m4.large,c1.medium,m3.large,r4.large,m4.xlarge,i3.xlarge,i3.2xlarge,i2.xlarge&quot;&gt;ec2instances.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cloud" /><category term="servers" /><category term="architecture" /><category term="scaling" /><category term="digital-ocean" /><category term="amazon-web-services" /><category term="google-cloud-engine" /><category term="azure" /><category term="packet.net" /><category term="online.net" /><category term="ovh.net" /><summary type="html">Boost Cloud Performance up to 70%</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-8.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">MongoDB Tuning: disable-transparent-hugepages fix for Debian/Ubuntu</title><link href="http://localhost:4000/2015/12/22/disable-transparent-hugepages/" rel="alternate" type="text/html" title="MongoDB Tuning: disable-transparent-hugepages fix for Debian/Ubuntu" /><published>2015-12-22T00:00:00-07:00</published><updated>2015-12-22T00:00:00-07:00</updated><id>http://localhost:4000/2015/12/22/disable-transparent-hugepages</id><content type="html" xml:base="http://localhost:4000/2015/12/22/disable-transparent-hugepages/">&lt;h1 id=&quot;mongodb-tuning-disable-transparent-hugepages-fix-for-debianubuntu&quot;&gt;MongoDB Tuning: disable-transparent-hugepages fix for Debian/Ubuntu&lt;/h1&gt;

&lt;h2 id=&quot;seeing-warning-syskernelmmtransparent_hugepagedefrag-is-always-&quot;&gt;Seeing: “WARNING: /sys/kernel/mm/transparent_hugepage/defrag is ‘always’.” ?&lt;/h2&gt;

&lt;p&gt;Run the following commands to quickly do what &lt;a href=&quot;https://docs.mongodb.org/v3.0/tutorial/transparent-huge-pages/&quot;&gt;MongoDB describes at greater length&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# Currently just debian&lt;/span&gt;
  sudo curl -sSL -o /etc/init.d/disable-transparent-hugepages https://gist.githubusercontent.com/justsml/5e8f10892070072c4ffb/raw/disable-transparent-hugepages
  sudo chmod 755 /etc/init.d/disable-transparent-hugepages
  sudo update-rc.d disable-transparent-hugepages defaults

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.mongodb.org/v3.0/tutorial/transparent-huge-pages/&quot;&gt;https://docs.mongodb.org/v3.0/tutorial/transparent-huge-pages/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="programming" /><category term="patterns" /><category term="models" /><category term="source code" /><category term="organization" /><summary type="html">MongoDB Tuning: disable-transparent-hugepages fix for Debian/Ubuntu Seeing: “WARNING: /sys/kernel/mm/transparent_hugepage/defrag is ‘always’.” ? Run the following commands to quickly do what MongoDB describes at greater length. # Currently just debian sudo curl -sSL -o /etc/init.d/disable-transparent-hugepages https://gist.githubusercontent.com/justsml/5e8f10892070072c4ffb/raw/disable-transparent-hugepages sudo chmod 755 /etc/init.d/disable-transparent-hugepages sudo update-rc.d disable-transparent-hugepages defaults References: https://docs.mongodb.org/v3.0/tutorial/transparent-huge-pages/</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-5.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">When AI Fails &amp;amp; the Crashing Robotic Cars</title><link href="http://localhost:4000/2015/12/18/when-ai-fails-and-the-crashing-robot-cars/" rel="alternate" type="text/html" title="When AI Fails &amp; the Crashing Robotic Cars" /><published>2015-12-18T00:00:00-07:00</published><updated>2015-12-18T00:00:00-07:00</updated><id>http://localhost:4000/2015/12/18/when-ai-fails-and-the-crashing-robot-cars</id><content type="html" xml:base="http://localhost:4000/2015/12/18/when-ai-fails-and-the-crashing-robot-cars/">&lt;h1 id=&quot;robotic-cars-more-accidents-now-with-less-injury--damages&quot;&gt;Robotic Cars: More accidents (now With Less Injury &amp;amp; Damages!)&lt;/h1&gt;

&lt;p&gt;Google’s self-driving cars are apparently in 2x as many accidents as human drivers - If you think this is just buggy new tech, way too complex from the get-go - well, you’re partially right. &lt;a href=&quot;http://www.bloomberg.com/news/articles/2015-12-18/humans-are-slamming-into-driverless-cars-and-exposing-a-key-flaw&quot;&gt;An important detail I should share: as of Dec 2015 virtually all accidents were not the robots fault.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The accidents are caused by humans drivers unfamiliar with robotic drivers. Furthermore, Google has programmed the cars to obey the law in absolute terms - never speeding, difficulty merging in dense or fast freeway traffic.
This opens up a bunch of legal, ethical questions -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is it ever ok:
    &lt;ul&gt;
      &lt;li&gt;to avoid a rear-end collision if it means driving past the walkway at a red light &lt;strong&gt;assuming path is clear&lt;/strong&gt; ?&lt;/li&gt;
      &lt;li&gt;to drive on the sidewalk to avoid a bicycle cutting across lanes? - is it ok for AI to accept this breach in ‘rules of the road’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I understand Google’s approach, especially when trying to minimize liability: always follow the rules - logically it follows that you cannot really be at fault if you &lt;strong&gt;always&lt;/strong&gt; observe the law.&lt;/p&gt;

&lt;p&gt;There would be &lt;strong&gt;massive liability&lt;/strong&gt; if an accident happened because of intentionally designed ‘flexibility’ around the laws.&lt;/p&gt;

&lt;h2 id=&quot;dont-let-the-future-escape-us&quot;&gt;Don’t let the future escape us&lt;/h2&gt;

&lt;p&gt;The future will still arrive, even if the robots drive like octagenarians.&lt;/p&gt;

&lt;p&gt;Perhaps a simple fix for now would be to use bright red flashing LEDs  (think school buses) to warn human drivers they are about to rear-end an innocent robot.&lt;/p&gt;

&lt;p&gt;I would be more comfortable with a car which had tiers of observance and rule adherance. To my mind this would be much closer to how humans drive.&lt;/p&gt;

&lt;p&gt;Imagine 3-tiers of system-perception as follows: (decision &amp;amp; other layers omitted for simplicity)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;base: follows laws with annoying precision&lt;/li&gt;
  &lt;li&gt;local: flexibile adjustments based on current traffic - to allow merge on the highway if say, 10MPH+ is needed. Conversely if the traffic is simply going too fast, the car should be smart enough to pull over to avoid being a nuissance to other drivers.&lt;/li&gt;
  &lt;li&gt;360: calculate ANY potential extreme collision risk/avoidance measures - driving on a shoulder or&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This would likely require a smart balancing act - say tier 1 detects an immenent accident which cannot be avoided following the laws, it would then shift all processor power into tier 3 - hopefully finding a creative way to avoid harm.&lt;/p&gt;

&lt;p&gt;Robotic cars are on the cusp of being technically smarter &amp;amp; faster than any human driver. Accept it. Welcome it.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://nn.cs.utexas.edu/pages/research/neat-warning/&quot;&gt;http://nn.cs.utexas.edu/pages/research/neat-warning/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.claimsjournal.com/magazines/idea-exchange/2014/09/29/255161.htm&quot;&gt;http://www.claimsjournal.com/magazines/idea-exchange/2014/09/29/255161.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="artificial intelligence" /><category term="ai" /><category term="self-driving cars" /><category term="fails" /><summary type="html">Robotic Cars: More accidents (now With Less Injury &amp;amp; Damages!) Google’s self-driving cars are apparently in 2x as many accidents as human drivers - If you think this is just buggy new tech, way too complex from the get-go - well, you’re partially right. An important detail I should share: as of Dec 2015 virtually all accidents were not the robots fault. The accidents are caused by humans drivers unfamiliar with robotic drivers. Furthermore, Google has programmed the cars to obey the law in absolute terms - never speeding, difficulty merging in dense or fast freeway traffic. This opens up a bunch of legal, ethical questions - Is it ever ok: to avoid a rear-end collision if it means driving past the walkway at a red light assuming path is clear ? to drive on the sidewalk to avoid a bicycle cutting across lanes? - is it ok for AI to accept this breach in ‘rules of the road’ I understand Google’s approach, especially when trying to minimize liability: always follow the rules - logically it follows that you cannot really be at fault if you always observe the law. There would be massive liability if an accident happened because of intentionally designed ‘flexibility’ around the laws. Don’t let the future escape us The future will still arrive, even if the robots drive like octagenarians. Perhaps a simple fix for now would be to use bright red flashing LEDs (think school buses) to warn human drivers they are about to rear-end an innocent robot. I would be more comfortable with a car which had tiers of observance and rule adherance. To my mind this would be much closer to how humans drive. Imagine 3-tiers of system-perception as follows: (decision &amp;amp; other layers omitted for simplicity) base: follows laws with annoying precision local: flexibile adjustments based on current traffic - to allow merge on the highway if say, 10MPH+ is needed. Conversely if the traffic is simply going too fast, the car should be smart enough to pull over to avoid being a nuissance to other drivers. 360: calculate ANY potential extreme collision risk/avoidance measures - driving on a shoulder or This would likely require a smart balancing act - say tier 1 detects an immenent accident which cannot be avoided following the laws, it would then shift all processor power into tier 3 - hopefully finding a creative way to avoid harm. Robotic cars are on the cusp of being technically smarter &amp;amp; faster than any human driver. Accept it. Welcome it. References http://nn.cs.utexas.edu/pages/research/neat-warning/ http://www.claimsjournal.com/magazines/idea-exchange/2014/09/29/255161.htm</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-2.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">Higher Order Programming</title><link href="http://localhost:4000/2015/09/22/higher-order-programming/" rel="alternate" type="text/html" title="Higher Order Programming" /><published>2015-09-22T00:00:00-06:00</published><updated>2015-09-22T00:00:00-06:00</updated><id>http://localhost:4000/2015/09/22/higher-order-programming</id><content type="html" xml:base="http://localhost:4000/2015/09/22/higher-order-programming/">&lt;h4 id=&quot;work-in-progress-updated-nov-2015&quot;&gt;&lt;em&gt;Work-in-progress (updated Nov. 2015)&lt;/em&gt;&lt;/h4&gt;

&lt;h1 id=&quot;array--or-set-based-coding-style&quot;&gt;Array- or Set-based Coding Style&lt;/h1&gt;

&lt;h2 id=&quot;an-anti-pattern&quot;&gt;An Anti-Pattern?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: This is not Yet-Another-Article warning noobs about RAM usage when appending strings&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an exploration of advantages gained when you &lt;strong&gt;code everything as an array.&lt;/strong&gt; (Using Jedi concepts from SmallTalk)&lt;/p&gt;

&lt;p&gt;Here’s some guiding principles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All input is array-like. Even if an array of 1.&lt;/li&gt;
  &lt;li&gt;Functions should generally accept AND return arrays.&lt;/li&gt;
  &lt;li&gt;99 out of 100 devs code suffers from what I call &lt;code class=&quot;highlighter-rouge&quot;&gt;acute schema surplusage&lt;/code&gt; syndrome -based models.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Yes, beware &lt;code class=&quot;highlighter-rouge&quot;&gt;fat ASS models&lt;/code&gt; - with all the predictable trappings: fragile &lt;code class=&quot;highlighter-rouge&quot;&gt;instance state&lt;/code&gt; - so many levers and knobs to mess with, DB transactions, sql locks, async/mutexing (that always works first time), using idiomatic &lt;code class=&quot;highlighter-rouge&quot;&gt;property getter/setters&lt;/code&gt;, and your &lt;code class=&quot;highlighter-rouge&quot;&gt;public/private/final/etc&lt;/code&gt; usage is solid, right?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;So let me take a common problem and &lt;em&gt;shoehorn&lt;/em&gt; ~&lt;del&gt;add&lt;/del&gt;~ some set-based musings.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why is a Product price always a single data point? Why would I make price(s) an Array?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s add this functionality:
    a. &lt;strong&gt;New requirements:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;retailPrice&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;priceSavings&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;These changes hopefully look no worse than my sorry attempt:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;danlevy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;testpool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;why&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;many&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retailPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priceSavings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retailPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;priceSavings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retailPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priceSavings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retailPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retailPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;priceSavings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priceSavings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPriceSavings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retailPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(I’m not replacing the valid pattern of tracking historical prices in tables)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I’m not sure about you, but price of just about anything is in flux - just given time.
  1.
  I &lt;strong&gt;experience&lt;/strong&gt; price as constantly fluctuating data point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;For example, even values which seem like singular variables - say a &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; class includes &lt;code class=&quot;highlighter-rouge&quot;&gt;var listPrice = 125&lt;/code&gt; - change it to &lt;code class=&quot;highlighter-rouge&quot;&gt;var prices = [50, 100, 125]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Bear with me. That is not likely the final re-factor on that…&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'widget'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Foreshadowing: We’re going to go through a concept familiar to LISP, SmallTalk, et al. devs.
It’s known by many names, however I prefer &lt;strong&gt;Array-based programming.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-issue-well-examine-is-deceptively-simple--subtle-naming&quot;&gt;The issue we’ll examine is deceptively simple &amp;amp; subtle: &lt;strong&gt;Naming&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I want to avoid the super-fancy-tech-lingo for this article; and hopefully I can illustrate the issue in a more useful fashion.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;While covered in exhausting detail before, the subject matter often gets too technical for the novice programmer to draw any practical understanding. You probably don’t need to read this if the following makes sense: &lt;code class=&quot;highlighter-rouge&quot;&gt;No-Sql denormalization strategy&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;Boyce Codd Normal Forms&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recommended reading includes:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Book: Code Complete&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://phlonx.com/resources/nf3/&quot;&gt;http://phlonx.com/resources/nf3/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Database_normalization&quot;&gt;https://en.wikipedia.org/wiki/Database_normalization&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-problem---by-example&quot;&gt;The Problem - by Example&lt;/h2&gt;

&lt;p&gt;Have you ever designed a &lt;code class=&quot;highlighter-rouge&quot;&gt;data model&lt;/code&gt; (in code, Sql, or excel worksheets)?
Does the following look familiar?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*** anti-pattern - don't copy-paste ***
* User
  - id
  - avatarUrl
  - email
  - passwordHash

* Agent
  - id
  - primaryPhoto
  - agentName
  - agentEmail
  - agentPhoneMain
  - agentEmailPrimary
  - agentPhonePrimary
  - agentAddressLine1
  - agentCompanyName
  - agentCompanyAddress
  - *userEmail* - 'Pointer' to User table ^^^
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If this is familiar to you, I’ll bet you:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Feel any change to your app will necessitate hours of arduous debugging.&lt;/li&gt;
  &lt;li&gt;Fear ANY Changing Requirements
&lt;img src=&quot;https://res.cloudinary.com/ddd/image/upload/bldg-collapse__wsZKhIc_kafcha.gif&quot; alt=&quot;schema refactor&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-cost-of-bad-naming-habits&quot;&gt;The Cost of Bad (Naming) Habits&lt;/h2&gt;

&lt;p&gt;Let’s examine some of the subtle issues (probably familiar):&lt;/p&gt;

&lt;p&gt;=======&lt;/p&gt;

&lt;p&gt;Why is naming a field &lt;code class=&quot;highlighter-rouge&quot;&gt;agentEmailPrimary&lt;/code&gt; the worst?&lt;/p&gt;

&lt;p&gt;For starters, you are &lt;strong&gt;not&lt;/strong&gt; creating an entirely new object unto the universe. Over-specificity has some traps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;‘Locked’ into highly specific name, means &lt;code class=&quot;highlighter-rouge&quot;&gt;agentEmailPrimary&lt;/code&gt; probably make your views and related code &lt;strong&gt;0% reusable&lt;/strong&gt;, and featuring annoyingly recurring bugs like:
    &lt;ul&gt;
      &lt;li&gt;Data not syncing between tables (not obvious if &lt;code class=&quot;highlighter-rouge&quot;&gt;user.email&lt;/code&gt; needs to propagate to &lt;code class=&quot;highlighter-rouge&quot;&gt;agent.agentEmail&lt;/code&gt; or vice-versa - nevermind complexity of manually implementing where &amp;amp; how to enforce this ‘logic’ …)&lt;/li&gt;
      &lt;li&gt;Validation rules/logic are likely duplicated &amp;amp; inconsitent.&lt;/li&gt;
      &lt;li&gt;Increasingly, your project will resemble a shaky Jenga tower.&lt;/li&gt;
      &lt;li&gt;Fragility piles up with every single new file, as an extremely high attention to detail is required for even trivial changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know, you probably feel something like…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/ddd/image/upload/panda-rampage__tumblr_nq7srwTXqr1stn6klo1_500_gm2som.gif&quot; alt=&quot;fuck this&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-solution&quot;&gt;A Solution&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Dan's Recommended Schema Consolidation:

User
  - id
  - role: ['agent', 'lead', 'admin']
  - name
  - phone
  - address
  - email
  - passwordHash
  - company
    - name
    - address

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I removed the &lt;code class=&quot;highlighter-rouge&quot;&gt;Agent&lt;/code&gt; table, as it didn’t contain fields which were uniquely related to Agents.&lt;/p&gt;

&lt;p&gt;All changes were made with these general ideas in mind:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eliminate unessesary tables. If you have a few dozen tables, this step is mandatory.&lt;/li&gt;
  &lt;li&gt;Try merge related tables. &lt;strong&gt;Important if you are coming from a SQL background to No-SQL&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Delete redundant data collection (e.g. remove &lt;code class=&quot;highlighter-rouge&quot;&gt;ActivityLogs&lt;/code&gt; table if replaced by Google Analytics)&lt;/li&gt;
  &lt;li&gt;Try keeping &lt;strong&gt;all field names&lt;/strong&gt; to a &lt;strong&gt;single word/noun/pro-noun&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;There is &lt;strong&gt;no such thing&lt;/strong&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;Agent.agentEmail&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Agent.agentPhonePrimary&lt;/code&gt;. Period.&lt;/li&gt;
  &lt;li&gt;By using Highly Specific Names, you cast-in-stone a specific level of &lt;code class=&quot;highlighter-rouge&quot;&gt;code-reusability&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;durability&lt;/code&gt;, well, specifically &lt;strong&gt;ZERO %&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Don’t think you are doing yourself any favors with crap like this &lt;code class=&quot;highlighter-rouge&quot;&gt;User.profileSummaryEmail&lt;/code&gt; (where ‘profile’ could include contact details for a personal ads site) . This is probably a good point to create a new table, say &lt;code class=&quot;highlighter-rouge&quot;&gt;Profiles&lt;/code&gt; which includes &lt;code class=&quot;highlighter-rouge&quot;&gt;Profiles.email&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;work-in-progress-updated-nov-2015-1&quot;&gt;&lt;em&gt;Work-in-progress (updated Nov. 2015)&lt;/em&gt;&lt;/h3&gt;

&lt;!-- ![schema refactor][schema_refactor] --&gt;</content><author><name></name></author><category term="programming" /><category term="patterns" /><category term="models" /><category term="source code" /><category term="organization" /><summary type="html">Work-in-progress (updated Nov. 2015) Array- or Set-based Coding Style An Anti-Pattern? Note: This is not Yet-Another-Article warning noobs about RAM usage when appending strings This is an exploration of advantages gained when you code everything as an array. (Using Jedi concepts from SmallTalk) Here’s some guiding principles: All input is array-like. Even if an array of 1. Functions should generally accept AND return arrays. 99 out of 100 devs code suffers from what I call acute schema surplusage syndrome -based models. Yes, beware fat ASS models - with all the predictable trappings: fragile instance state - so many levers and knobs to mess with, DB transactions, sql locks, async/mutexing (that always works first time), using idiomatic property getter/setters, and your public/private/final/etc usage is solid, right? So let me take a common problem and shoehorn ~add~ some set-based musings. Why is a Product price always a single data point? Why would I make price(s) an Array? Let’s add this functionality: a. New requirements: retailPrice, priceSavings These changes hopefully look no worse than my sorry attempt: package net.danlevy.testpool.why.java.has.so.many.dots; public class Product { public String Name; public float Price; public float retailPrice; public float priceSavings; public Product(String name, float price) { Name = name; Price = price; this.retailPrice = price; this.priceSavings = 0.0f; } public Product(String name, float price, float retailPrice, float priceSavings) { this.name = name; this.price = price; this.retailPrice = retailPrice; this.priceSavings = priceSavings; } public float getPriceSavings() { return this.retailPrice - this.price; } } (I’m not replacing the valid pattern of tracking historical prices in tables) I’m not sure about you, but price of just about anything is in flux - just given time. 1. I experience price as constantly fluctuating data point. For example, even values which seem like singular variables - say a Product class includes var listPrice = 125 - change it to var prices = [50, 100, 125]. Bear with me. That is not likely the final re-factor on that… function Product({name='widget', prices=[]}) { } Foreshadowing: We’re going to go through a concept familiar to LISP, SmallTalk, et al. devs. It’s known by many names, however I prefer Array-based programming. The issue we’ll examine is deceptively simple &amp;amp; subtle: Naming I want to avoid the super-fancy-tech-lingo for this article; and hopefully I can illustrate the issue in a more useful fashion. While covered in exhausting detail before, the subject matter often gets too technical for the novice programmer to draw any practical understanding. You probably don’t need to read this if the following makes sense: No-Sql denormalization strategy, or Boyce Codd Normal Forms Recommended reading includes: Book: Code Complete http://phlonx.com/resources/nf3/ https://en.wikipedia.org/wiki/Database_normalization The Problem - by Example Have you ever designed a data model (in code, Sql, or excel worksheets)? Does the following look familiar? *** anti-pattern - don't copy-paste *** * User - id - avatarUrl - email - passwordHash * Agent - id - primaryPhoto - agentName - agentEmail - agentPhoneMain - agentEmailPrimary - agentPhonePrimary - agentAddressLine1 - agentCompanyName - agentCompanyAddress - *userEmail* - 'Pointer' to User table ^^^ If this is familiar to you, I’ll bet you: Feel any change to your app will necessitate hours of arduous debugging. Fear ANY Changing Requirements The Cost of Bad (Naming) Habits Let’s examine some of the subtle issues (probably familiar): ======= Why is naming a field agentEmailPrimary the worst? For starters, you are not creating an entirely new object unto the universe. Over-specificity has some traps: ‘Locked’ into highly specific name, means agentEmailPrimary probably make your views and related code 0% reusable, and featuring annoyingly recurring bugs like: Data not syncing between tables (not obvious if user.email needs to propagate to agent.agentEmail or vice-versa - nevermind complexity of manually implementing where &amp;amp; how to enforce this ‘logic’ …) Validation rules/logic are likely duplicated &amp;amp; inconsitent. Increasingly, your project will resemble a shaky Jenga tower. Fragility piles up with every single new file, as an extremely high attention to detail is required for even trivial changes I know, you probably feel something like… A Solution // Dan's Recommended Schema Consolidation: User - id - role: ['agent', 'lead', 'admin'] - name - phone - address - email - passwordHash - company - name - address I removed the Agent table, as it didn’t contain fields which were uniquely related to Agents. All changes were made with these general ideas in mind: Eliminate unessesary tables. If you have a few dozen tables, this step is mandatory. Try merge related tables. Important if you are coming from a SQL background to No-SQL Delete redundant data collection (e.g. remove ActivityLogs table if replaced by Google Analytics) Try keeping all field names to a single word/noun/pro-noun. There is no such thing as Agent.agentEmail or Agent.agentPhonePrimary. Period. By using Highly Specific Names, you cast-in-stone a specific level of code-reusability and durability, well, specifically ZERO %. Don’t think you are doing yourself any favors with crap like this User.profileSummaryEmail (where ‘profile’ could include contact details for a personal ads site) . This is probably a good point to create a new table, say Profiles which includes Profiles.email. Work-in-progress (updated Nov. 2015)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-5.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">Beautiful Models (and Data)</title><link href="http://localhost:4000/2015/09/22/beautiful-engineering-models-and-data/" rel="alternate" type="text/html" title="Beautiful Models (and Data)" /><published>2015-09-22T00:00:00-06:00</published><updated>2015-09-22T00:00:00-06:00</updated><id>http://localhost:4000/2015/09/22/beautiful-engineering-models-and-data</id><content type="html" xml:base="http://localhost:4000/2015/09/22/beautiful-engineering-models-and-data/">&lt;h4 id=&quot;work-in-progress-updated-sep-2015&quot;&gt;&lt;em&gt;Work-in-progress (updated Sep. 2015)&lt;/em&gt;&lt;/h4&gt;

&lt;h2 id=&quot;the-issue-well-examine-is-deceptively-simple--subtle-naming&quot;&gt;The issue we’ll examine is deceptively simple &amp;amp; subtle: &lt;strong&gt;Naming&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I want to avoid the super-fancy-tech-lingo for this article; and hopefully I can illustrate the issue in a more useful fashion.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;While covered in exhausting detail before, the subject matter often gets too technical for the novice programmer to draw any practical understanding. You probably don’t need to read this if the following makes sense: &lt;code class=&quot;highlighter-rouge&quot;&gt;No-Sql denormalization strategy&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;Boyce Codd Normal Forms&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recommended reading includes:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Book: Code Complete&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://phlonx.com/resources/nf3/&quot;&gt;http://phlonx.com/resources/nf3/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Database_normalization&quot;&gt;https://en.wikipedia.org/wiki/Database_normalization&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-problem---by-example&quot;&gt;The Problem - by Example&lt;/h2&gt;

&lt;p&gt;Have you ever designed a &lt;code class=&quot;highlighter-rouge&quot;&gt;data model&lt;/code&gt; (in code, Sql, or excel worksheets)?
Does the following look familiar?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*** anti-pattern - don't copy-paste ***
* User
  - id
  - avatarUrl
  - email
  - passwordHash

* Agent
  - id
  - primaryPhoto
  - agentName
  - agentEmail
  - agentPhoneMain
  - agentEmailPrimary
  - agentPhonePrimary
  - agentAddressLine1
  - agentCompanyName
  - agentCompanyAddress
  - *userEmail* - 'Pointer' to User table ^^^
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If this is familiar to you, I’ll bet you:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Feel any change to your app will necessitate hours of arduous debugging.&lt;/li&gt;
  &lt;li&gt;Fear ANY Changing Requirements
&lt;img src=&quot;https://res.cloudinary.com/ddd/image/upload/bldg-collapse__wsZKhIc_kafcha.gif&quot; alt=&quot;schema refactor&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-cost-of-bad-naming-habits&quot;&gt;The Cost of Bad (Naming) Habits&lt;/h2&gt;

&lt;p&gt;Let’s examine some of the subtle issues (probably familiar):&lt;/p&gt;

&lt;p&gt;=======&lt;/p&gt;

&lt;p&gt;Why is naming a field &lt;code class=&quot;highlighter-rouge&quot;&gt;agentEmailPrimary&lt;/code&gt; the worst?&lt;/p&gt;

&lt;p&gt;For starters, you are &lt;strong&gt;not&lt;/strong&gt; creating an entirely new object unto the universe. Over-specificity has some traps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;‘Locked’ into highly specific name, means &lt;code class=&quot;highlighter-rouge&quot;&gt;agentEmailPrimary&lt;/code&gt; probably make your views and related code &lt;strong&gt;0% reusable&lt;/strong&gt;, and featuring annoyingly recurring bugs like:
    &lt;ul&gt;
      &lt;li&gt;Data not syncing between tables (not obvious if &lt;code class=&quot;highlighter-rouge&quot;&gt;user.email&lt;/code&gt; needs to propagate to &lt;code class=&quot;highlighter-rouge&quot;&gt;agent.agentEmail&lt;/code&gt; or vice-versa - nevermind complexity of manually implementing where &amp;amp; how to enforce this ‘logic’ …)&lt;/li&gt;
      &lt;li&gt;Validation rules/logic are likely duplicated &amp;amp; inconsitent.&lt;/li&gt;
      &lt;li&gt;Increasingly, your project will resemble a shaky Jenga tower.&lt;/li&gt;
      &lt;li&gt;Fragility piles up with every single new file, as an extremely high attention to detail is required for even trivial changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know, you probably feel something like…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/ddd/image/upload/panda-rampage__tumblr_nq7srwTXqr1stn6klo1_500_gm2som.gif&quot; alt=&quot;fuck this&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-solution&quot;&gt;A Solution&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Dan's Recommended Schema Consolidation:

User
  - id
  - role: ['agent', 'lead', 'admin']
  - name
  - phone
  - address
  - email
  - passwordHash
  - company
    - name
    - address

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I removed the &lt;code class=&quot;highlighter-rouge&quot;&gt;Agent&lt;/code&gt; table, as it didn’t contain fields which were uniquely related to Agents.&lt;/p&gt;

&lt;p&gt;All changes were made with these general ideas in mind:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eliminate unessesary tables. If you have a few dozen tables, this step is mandatory.&lt;/li&gt;
  &lt;li&gt;Try merge related tables. &lt;strong&gt;Important if you are coming from a SQL background to No-SQL&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Delete redundant data collection (e.g. remove &lt;code class=&quot;highlighter-rouge&quot;&gt;ActivityLogs&lt;/code&gt; table if replaced by Google Analytics)&lt;/li&gt;
  &lt;li&gt;Try keeping &lt;strong&gt;all field names&lt;/strong&gt; to a &lt;strong&gt;single word/noun/pro-noun&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;There is &lt;strong&gt;no such thing&lt;/strong&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;Agent.agentEmail&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Agent.agentPhonePrimary&lt;/code&gt;. Period.&lt;/li&gt;
  &lt;li&gt;By using Highly Specific Names, you cast-in-stone a specific level of &lt;code class=&quot;highlighter-rouge&quot;&gt;code-reusability&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;durability&lt;/code&gt;, well, specifically &lt;strong&gt;ZERO %&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Don’t think you are doing yourself any favors with crap like this &lt;code class=&quot;highlighter-rouge&quot;&gt;User.profileSummaryEmail&lt;/code&gt; (where ‘profile’ could include contact details for a personal ads site) . This is probably a good point to create a new table, say &lt;code class=&quot;highlighter-rouge&quot;&gt;Profiles&lt;/code&gt; which includes &lt;code class=&quot;highlighter-rouge&quot;&gt;Profiles.email&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;work-in-progress-updated-sep-2015-1&quot;&gt;&lt;em&gt;Work-in-progress (updated Sep. 2015)&lt;/em&gt;&lt;/h3&gt;

&lt;!-- ![schema refactor][schema_refactor] --&gt;</content><author><name></name></author><category term="programming" /><category term="patterns" /><category term="models" /><category term="source code" /><category term="organization" /><summary type="html">Work-in-progress (updated Sep. 2015) The issue we’ll examine is deceptively simple &amp;amp; subtle: Naming I want to avoid the super-fancy-tech-lingo for this article; and hopefully I can illustrate the issue in a more useful fashion. While covered in exhausting detail before, the subject matter often gets too technical for the novice programmer to draw any practical understanding. You probably don’t need to read this if the following makes sense: No-Sql denormalization strategy, or Boyce Codd Normal Forms Recommended reading includes: Book: Code Complete http://phlonx.com/resources/nf3/ https://en.wikipedia.org/wiki/Database_normalization The Problem - by Example Have you ever designed a data model (in code, Sql, or excel worksheets)? Does the following look familiar? *** anti-pattern - don't copy-paste *** * User - id - avatarUrl - email - passwordHash * Agent - id - primaryPhoto - agentName - agentEmail - agentPhoneMain - agentEmailPrimary - agentPhonePrimary - agentAddressLine1 - agentCompanyName - agentCompanyAddress - *userEmail* - 'Pointer' to User table ^^^ If this is familiar to you, I’ll bet you: Feel any change to your app will necessitate hours of arduous debugging. Fear ANY Changing Requirements The Cost of Bad (Naming) Habits Let’s examine some of the subtle issues (probably familiar): ======= Why is naming a field agentEmailPrimary the worst? For starters, you are not creating an entirely new object unto the universe. Over-specificity has some traps: ‘Locked’ into highly specific name, means agentEmailPrimary probably make your views and related code 0% reusable, and featuring annoyingly recurring bugs like: Data not syncing between tables (not obvious if user.email needs to propagate to agent.agentEmail or vice-versa - nevermind complexity of manually implementing where &amp;amp; how to enforce this ‘logic’ …) Validation rules/logic are likely duplicated &amp;amp; inconsitent. Increasingly, your project will resemble a shaky Jenga tower. Fragility piles up with every single new file, as an extremely high attention to detail is required for even trivial changes I know, you probably feel something like… A Solution // Dan's Recommended Schema Consolidation: User - id - role: ['agent', 'lead', 'admin'] - name - phone - address - email - passwordHash - company - name - address I removed the Agent table, as it didn’t contain fields which were uniquely related to Agents. All changes were made with these general ideas in mind: Eliminate unessesary tables. If you have a few dozen tables, this step is mandatory. Try merge related tables. Important if you are coming from a SQL background to No-SQL Delete redundant data collection (e.g. remove ActivityLogs table if replaced by Google Analytics) Try keeping all field names to a single word/noun/pro-noun. There is no such thing as Agent.agentEmail or Agent.agentPhonePrimary. Period. By using Highly Specific Names, you cast-in-stone a specific level of code-reusability and durability, well, specifically ZERO %. Don’t think you are doing yourself any favors with crap like this User.profileSummaryEmail (where ‘profile’ could include contact details for a personal ads site) . This is probably a good point to create a new table, say Profiles which includes Profiles.email. Work-in-progress (updated Sep. 2015)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-5.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">AngularJS v2.0 and the Impending Schism</title><link href="http://localhost:4000/2015/08/05/angularjs-v2-impending-schism/" rel="alternate" type="text/html" title="AngularJS v2.0 and the Impending Schism" /><published>2015-08-05T00:00:00-06:00</published><updated>2015-08-05T00:00:00-06:00</updated><id>http://localhost:4000/2015/08/05/angularjs-v2-impending-schism</id><content type="html" xml:base="http://localhost:4000/2015/08/05/angularjs-v2-impending-schism/">&lt;p&gt;I think we are witnessing the Python 2-&amp;gt;3 ‘Conversion’ all over again.
AngularJS v2.0 introduces too many changes. &lt;strong&gt;Not least of which is TypeScript&lt;/strong&gt;, which is a big ask amidst the finalization of JS’s latest version: ES6.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let me say clearly: I love TypeScript. I seccretly wish the TC-39 meetings had produced it… They didn’t.
However, They came up with another (totally different), also-awesome spec…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While TypeScript compiles to JavaScript, it doesn’t mean you blindly copy &amp;amp; paste ‘compiled’ TypeScript. It effectively becomes required learning, as to understand annotated AngularJS 2.0 TypeScript.&lt;/p&gt;

&lt;p&gt;Now, newbies must climb ‘Mount TypeScript’ before they can even start assembling an Angular app (with some level of understanding).&lt;/p&gt;

&lt;p&gt;I have a feeling how this might go…&lt;/p&gt;

&lt;div class=&quot;anigif end&quot;&gt;
  &lt;img alt=&quot;endless loop&quot; src=&quot;https://res.cloudinary.com/ddd/image/upload/timeout-expired.gif&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Oh well, I’ll add it to the Newbie training list: somewhere between &lt;code class=&quot;highlighter-rouge&quot;&gt;Basic Shell Usage&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Gulp or Grunt? Godsend+Misery!&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Anyway, I hope this works out…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;anigif top end&quot;&gt;
  &lt;img alt=&quot;everything is going to be ok&quot; src=&quot;http://res.cloudinary.com/ddd/image/upload/v1442175801/system-maint-anon.gif&quot; /&gt;
&lt;/div&gt;</content><author><name></name></author><category term="programming" /><category term="angularjs" /><category term="javascript" /><category term="python" /><category term="opinion" /><summary type="html">I think we are witnessing the Python 2-&amp;gt;3 ‘Conversion’ all over again. AngularJS v2.0 introduces too many changes. Not least of which is TypeScript, which is a big ask amidst the finalization of JS’s latest version: ES6. Let me say clearly: I love TypeScript. I seccretly wish the TC-39 meetings had produced it… They didn’t. However, They came up with another (totally different), also-awesome spec… While TypeScript compiles to JavaScript, it doesn’t mean you blindly copy &amp;amp; paste ‘compiled’ TypeScript. It effectively becomes required learning, as to understand annotated AngularJS 2.0 TypeScript. Now, newbies must climb ‘Mount TypeScript’ before they can even start assembling an Angular app (with some level of understanding). I have a feeling how this might go… Oh well, I’ll add it to the Newbie training list: somewhere between Basic Shell Usage and Gulp or Grunt? Godsend+Misery! Anyway, I hope this works out…</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-11.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">Polyglot Redux</title><link href="http://localhost:4000/2015/06/12/polyglot-redux/" rel="alternate" type="text/html" title="Polyglot Redux" /><published>2015-06-12T00:00:00-06:00</published><updated>2015-06-12T00:00:00-06:00</updated><id>http://localhost:4000/2015/06/12/polyglot-redux</id><content type="html" xml:base="http://localhost:4000/2015/06/12/polyglot-redux/">&lt;h1 id=&quot;programming-languages-notes&quot;&gt;Programming Languages Notes&lt;/h1&gt;

&lt;h3 id=&quot;im-sure-my-miscellaneous-observations-have-been-made-before-but-here-is-my-list-of-most-interesting-languages&quot;&gt;I’m sure my Miscellaneous Observations have been made before, but here is my list of most interesting languages:&lt;/h3&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;

&lt;p&gt;My One True Love, supremely versatile &amp;amp; ubiquitous - the all-around, amazingly-powerful champ!
It’s the #1 Most Active/Popular Language on GitHub.com for &lt;em&gt;years&lt;/em&gt; running.&lt;/p&gt;

&lt;p&gt;I hate to admit it, but for years I foolishly had nothing but scorn and derision for what is now, &lt;strong&gt;my favorite language&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ES6&lt;/strong&gt; has only increased my ~&lt;del&gt;addiction&lt;/del&gt;~ love. While pure ES5 will always hold a special place in my heart, each time I use some &lt;strong&gt;ES6&lt;/strong&gt;, I feel that radioactive spider-bite…&lt;/p&gt;

&lt;p&gt;There were 4 factors which pushed me into the &lt;strong&gt;ES6 Camp&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s fun. Seriously. There are tangible gains in beauty, clarity &amp;amp; productivity.
    &lt;ul&gt;
      &lt;li&gt;Subjective claims, you say? Let me show you a bit of ES6:&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let expired = users.filter(u =&amp;gt; Date.now() &amp;gt; u.trialDate)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Now you don’t have to pretend you know how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperty&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;See examples below&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;As of July 2015,  ES6 is an officially finalized standard now!&lt;/li&gt;
  &lt;li&gt;Support is Effectively 100%*! … Ok, BabelJS is needed to patch your code so it’s ES5 compatible. Historically JS transpilers have been frowned upon. However, as of late (2014-15) things have changed as BabelJS has become a key enabler/driver of language advancement. Tons of companies including Microsoft &amp;amp; Facebook use it on some of the largest sites around.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v4.0.0/&quot;&gt;Latest versions of Node&lt;/a&gt; include the same V8 JS engine as Chrome v45, it’s v4.5&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m going to show you what finally made me &lt;em&gt;start&lt;/em&gt; drinking that ES6-flavoured KoolAid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my recent experience, ES6 helps you write code faster. To the point.
Because code is more succinct, appreciably less brain power is needed to sift through and understand your old code (or that of a teammates).&lt;/p&gt;

&lt;p&gt;I have regularly seen KLOC savings roughly of 20-50%. That’s like Kate Moss trim!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/Diff-ES6-vs-ES5-Head-to-Head.png&quot; alt=&quot;EcmaScript 5 vs ES 2016 - Demo: Classes, Destructuring, Sexiness&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// /services/users.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trialDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;No more tedious code to ‘extract’ and ‘check’ fields passed to a function. Cut to example &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// /services/users.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Store pwd hash, We only need to define 1 explicit `var/let` - the other vars are 'defined' with the `{fields}` wizardry above ^^^&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'passwordHash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// append user upon service response&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;script src=&quot;https://gist.github.com/justsml/aaddc9852c1624d61cf3.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;h3 id=&quot;jumping-on-es6-can-feel-like-going-from&quot;&gt;Jumping on ES6 can feel like going from:&lt;/h3&gt;

&lt;div class=&quot;anigif top&quot;&gt;
  &lt;img alt=&quot;huh&quot; title=&quot;Huh?&quot; src=&quot;http://res.cloudinary.com/ddd/image/upload/v1441143891/wtf__tumblr_inline_n7ygqh6Y0C1svcdm1_igeqey.gif&quot; /&gt;
&lt;/div&gt;
&lt;h3&gt;To&lt;/h3&gt;
&lt;div class=&quot;anigif&quot;&gt;
  &lt;img alt=&quot;wtf&quot; title=&quot;WTF?!?!&quot; src=&quot;http://res.cloudinary.com/ddd/image/upload/v1443133148/cat-wtf-trap.gif&quot; /&gt;
&lt;/div&gt;
&lt;h3&gt;To&lt;/h3&gt;
&lt;div class=&quot;anigif end&quot;&gt;
  &lt;img alt=&quot;#winning&quot; title=&quot;#winning&quot; src=&quot;http://res.cloudinary.com/ddd/image/upload/v1443133141/full-throttle.gif&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Just keep sifting through the new stuff. Check out string templates, auto &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; binding, more-sane inheritance…&lt;/p&gt;

&lt;h4 id=&quot;nodejs&quot;&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.JS&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&quot;rust&quot;&gt;Rust&lt;/h2&gt;

&lt;h4 id=&quot;official-site&quot;&gt;&lt;a href=&quot;http://www.rust-lang.org/&quot;&gt;Official Site&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Imagine if there was a language as fast as C and as powerful as Python/C++, yet without the complexity/pitfalls that usually trap even the most skilled devs.&lt;/li&gt;
      &lt;li&gt;In fact I’d guess Rust is roughly as complex as the ES6 spec.&lt;/li&gt;
      &lt;li&gt;It includes a ton of extras:
        &lt;ol&gt;
          &lt;li&gt;Essentially Rust transpiles from semi-dynamic syntax into &lt;strong&gt;pure C code&lt;/strong&gt;!&lt;/li&gt;
          &lt;li&gt;Including &lt;strong&gt;__all the best practices__&lt;/strong&gt; in C you would probably screw up on, I &lt;del&gt;eventually&lt;/del&gt; always do.
            &lt;ul&gt;
              &lt;li&gt;Automatically you get:&lt;/li&gt;
              &lt;li&gt;Auto Memory management (no need for a slow garbage collector!)&lt;/li&gt;
              &lt;li&gt;Perfectly scoped Object ownership/locking (mutexting &amp;amp; context switching minimized)&lt;/li&gt;
              &lt;li&gt;Object lifetimes (automatically implemented*, and auto coded like you knew every edge case)&lt;/li&gt;
              &lt;li&gt;Prevent virtually all run time errors (seriously, your code-paths become explicit: you just can’t overlook a code-path)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Oh yeah, it throws in true language extensibility with a sensible ‘macro’ feature.
        &lt;ul&gt;
          &lt;li&gt;Need Comprehensions? &lt;a href=&quot;https://gist.github.com/hanny24/5749688&quot;&gt;Scala style? Done&lt;/a&gt;, and &lt;a href=&quot;https://gist.github.com/JeffBelgum/5e762761cd63c796e803&quot;&gt;Like Python? Done&lt;/a&gt;.
            &lt;ol&gt;
              &lt;li&gt;Too good to be true? Nah, It gets better:&lt;/li&gt;
            &lt;/ol&gt;
            &lt;ul&gt;
              &lt;li&gt;Bleeding edge indicators (github.com stats) reveal Rust is highly competitive or even beating Go (Google’s hot-newish language)
                &lt;ul&gt;
                  &lt;li&gt;About 4K More Stars than Go (currently around 12,200)&lt;/li&gt;
                  &lt;li&gt;More total Contributors ( 2x! - 1,071 vs. Go’s 479 )&lt;/li&gt;
                  &lt;li&gt;More forks ( 3X! - 2,343 vs. 765 )&lt;/li&gt;
                  &lt;li&gt;Number of Open Issues, Loses by a hair ( 2,000 vs 1,730 from Go )&lt;/li&gt;
                  &lt;li&gt;Pull Requests (Rust 70+ vs. Go’s 1)&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;I had to triple check the numbers too.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Other libraries are very stable due to the constructs &amp;amp; rules of rust.&lt;/li&gt;
      &lt;li&gt;Threading model usable by mere mortals&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Decent &lt;strong&gt;web frameworks&lt;/strong&gt; are relatively new, untested, and usually undocumented (though they are &lt;strong&gt;getting&lt;/strong&gt; very impressive - as of March 2015).&lt;/li&gt;
      &lt;li&gt;Lots of early pre-1.0 breaking changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Overwhelmingly complete assortment of algorithms are already implemented in Python ( see: scilearnkit, numpy, matplotlib, pil/pillow, etc. )&lt;/li&gt;
      &lt;li&gt;Very Fun to write! Comprehensions and Decomposition are great features and make other languages seem just bloated!&lt;/li&gt;
      &lt;li&gt;Arrays, ‘Sequences’, Tuples etc. are relatively simple&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# dummy code: defines a color + pixel-coord -&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a new pixel object and apply to set of vars&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Now we can call pixel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Annoyingly, Python 2.x and 3.x are incompatible. The Great Schism continues, so many years later.&lt;/li&gt;
      &lt;li&gt;Some essential libraries are not nessacerily understood by some devs (numpy)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;haskell&quot;&gt;Haskell&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Very rewarding when you finally memorize enough syntax to whip up comprehensions-based expressive patterns&lt;/li&gt;
      &lt;li&gt;You will learn mind-bending code patterns - often somewhat applicable to other languages.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Syntax &amp;amp; Patterns can be hard to get used to.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;anigif end&quot;&gt;
  &lt;img alt=&quot;endless loop&quot; src=&quot;http://res.cloudinary.com/ddd/image/upload/v1441143881/endless-loop.gif&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;smalltalk-80&quot;&gt;SmallTalk-80&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Incredibly simple compilers (original especially)&lt;/li&gt;
      &lt;li&gt;Great resources: &lt;a href=&quot;http://peter.michaux.ca/articles/smalltalk-mvc-translated-to-javascript&quot;&gt;Smalltalk MVC Translated to JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;You will likely never use this language for anything. Zero projects. However it will have more of an impact on your coding style, faster than other functional languages… This should be in the pros list)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;work-in-progress-updated-dec-2015&quot;&gt;&lt;em&gt;Work-in-progress (updated Dec. 2015)&lt;/em&gt;&lt;/h3&gt;</content><author><name></name></author><category term="programming" /><category term="languages" /><category term="lua" /><category term="haskell" /><category term="scala" /><category term="rust" /><category term="smalltalk" /><category term="go" /><category term="javascript" /><category term="python" /><summary type="html">Programming Languages Notes I’m sure my Miscellaneous Observations have been made before, but here is my list of most interesting languages: JavaScript My One True Love, supremely versatile &amp;amp; ubiquitous - the all-around, amazingly-powerful champ! It’s the #1 Most Active/Popular Language on GitHub.com for years running. I hate to admit it, but for years I foolishly had nothing but scorn and derision for what is now, my favorite language. ES6 has only increased my ~addiction~ love. While pure ES5 will always hold a special place in my heart, each time I use some ES6, I feel that radioactive spider-bite… There were 4 factors which pushed me into the ES6 Camp: It’s fun. Seriously. There are tangible gains in beauty, clarity &amp;amp; productivity. Subjective claims, you say? Let me show you a bit of ES6: let expired = users.filter(u =&amp;gt; Date.now() &amp;gt; u.trialDate) Now you don’t have to pretend you know how to use Object.create or Object.defineProperty See examples below As of July 2015, ES6 is an officially finalized standard now! Support is Effectively 100%*! … Ok, BabelJS is needed to patch your code so it’s ES5 compatible. Historically JS transpilers have been frowned upon. However, as of late (2014-15) things have changed as BabelJS has become a key enabler/driver of language advancement. Tons of companies including Microsoft &amp;amp; Facebook use it on some of the largest sites around. Latest versions of Node include the same V8 JS engine as Chrome v45, it’s v4.5 Examples I’m going to show you what finally made me start drinking that ES6-flavoured KoolAid. In my recent experience, ES6 helps you write code faster. To the point. Because code is more succinct, appreciably less brain power is needed to sift through and understand your old code (or that of a teammates). I have regularly seen KLOC savings roughly of 20-50%. That’s like Kate Moss trim! // /services/users.js class Users { constructor(data) { this.users = data || []; } expired() { return this.users .filter(u =&amp;gt; Date.now() &amp;gt; u.trialDate) } } No more tedious code to ‘extract’ and ‘check’ fields passed to a function. Cut to example add(): // /services/users.js class Users { constructor(data) { this.users = data || []; } add({name, email, password}) { // Store pwd hash, We only need to define 1 explicit `var/let` - the other vars are 'defined' with the `{fields}` wizardry above ^^^ let hash = getSha256(password); return http.post('/users', { 'name': name, 'email': email, 'passwordHash': hash }).then(usr =&amp;gt; this.users.push(usr)); // append user upon service response } } &amp;#160; Jumping on ES6 can feel like going from: To To Just keep sifting through the new stuff. Check out string templates, auto this binding, more-sane inheritance… Node.JS Rust Official Site Pros Imagine if there was a language as fast as C and as powerful as Python/C++, yet without the complexity/pitfalls that usually trap even the most skilled devs. In fact I’d guess Rust is roughly as complex as the ES6 spec. It includes a ton of extras: Essentially Rust transpiles from semi-dynamic syntax into pure C code! Including __all the best practices__ in C you would probably screw up on, I eventually always do. Automatically you get: Auto Memory management (no need for a slow garbage collector!) Perfectly scoped Object ownership/locking (mutexting &amp;amp; context switching minimized) Object lifetimes (automatically implemented*, and auto coded like you knew every edge case) Prevent virtually all run time errors (seriously, your code-paths become explicit: you just can’t overlook a code-path) Oh yeah, it throws in true language extensibility with a sensible ‘macro’ feature. Need Comprehensions? Scala style? Done, and Like Python? Done. Too good to be true? Nah, It gets better: Bleeding edge indicators (github.com stats) reveal Rust is highly competitive or even beating Go (Google’s hot-newish language) About 4K More Stars than Go (currently around 12,200) More total Contributors ( 2x! - 1,071 vs. Go’s 479 ) More forks ( 3X! - 2,343 vs. 765 ) Number of Open Issues, Loses by a hair ( 2,000 vs 1,730 from Go ) Pull Requests (Rust 70+ vs. Go’s 1) I had to triple check the numbers too. Other libraries are very stable due to the constructs &amp;amp; rules of rust. Threading model usable by mere mortals Cons Decent web frameworks are relatively new, untested, and usually undocumented (though they are getting very impressive - as of March 2015). Lots of early pre-1.0 breaking changes Python Pros Overwhelmingly complete assortment of algorithms are already implemented in Python ( see: scilearnkit, numpy, matplotlib, pil/pillow, etc. ) Very Fun to write! Comprehensions and Decomposition are great features and make other languages seem just bloated! Arrays, ‘Sequences’, Tuples etc. are relatively simple # dummy code: defines a color + pixel-coord - def pixel(x, y, r, g, b): return dict(x=x, y=y, r=r, g=g, b=b) # Create a new pixel object and apply to set of vars x, y, r, g, b = pixel(10, 20, 255, 255, 255) # Now we can call pixel Cons Annoyingly, Python 2.x and 3.x are incompatible. The Great Schism continues, so many years later. Some essential libraries are not nessacerily understood by some devs (numpy) Haskell Pros Very rewarding when you finally memorize enough syntax to whip up comprehensions-based expressive patterns You will learn mind-bending code patterns - often somewhat applicable to other languages. Cons Syntax &amp;amp; Patterns can be hard to get used to. SmallTalk-80 Pros Incredibly simple compilers (original especially) Great resources: Smalltalk MVC Translated to JavaScript Cons You will likely never use this language for anything. Zero projects. However it will have more of an impact on your coding style, faster than other functional languages… This should be in the pros list) Work-in-progress (updated Dec. 2015)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-11.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">Docker rocks. Boot2docker just sucks.</title><link href="http://localhost:4000/2015/06/10/docker-great-though-boot2docker-sucks/" rel="alternate" type="text/html" title="Docker rocks. Boot2docker just sucks." /><published>2015-06-10T23:00:12-06:00</published><updated>2015-06-10T23:00:12-06:00</updated><id>http://localhost:4000/2015/06/10/docker-great-though-boot2docker-sucks</id><content type="html" xml:base="http://localhost:4000/2015/06/10/docker-great-though-boot2docker-sucks/">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;h2 id=&quot;updates-november-2015&quot;&gt;Updates November 2015&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Boot2Docker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;to-everyone-on-osx-or-windows-dont-let-boot2docker-leave-you-with-the-impression-that-docker-sucks-its-really-just-your-antique-os&quot;&gt;To everyone on OSX or Windows: Don’t let Boot2docker leave you with the impression that Docker sucks! It’s really just your antique OS.&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Docker is amazing, period.&lt;/li&gt;
  &lt;li&gt;However it’s rough-around-the-edges, hackey utility, boot2docker - for OS X, Windows and old Linux Kernels - leaves a &lt;strong&gt;lot&lt;/strong&gt; to be desired.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;issues&quot;&gt;Issues&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Boot2docker causes 99/100 headaches compared with using a native docker install locally.
I should concede that it wraps several other complicated/flakey technologies:
VirtualBox, x-platform Folder Sharing, and also the docker cli command runs in a network-client mode so,
file copying, builds etc take a long time  vs. running a native docker server.
=============
Docker can currently only run natively on a Linux Kernel 3.4+ - and the current boot2docker vm actually runs v4.
Bottom Line: Install the Latest Debian (w/ xfce or MATE) on your Mac/Windows box,
… c’mon those games aren’t helping your code…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;boot2docker-key-commands&quot;&gt;Boot2docker Key Commands&lt;/h1&gt;

&lt;h2 id=&quot;when-you-get-error-fata0000&quot;&gt;When you get error: ‘FATA[0000]’&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Full error message:
    &lt;ul&gt;
      &lt;li&gt;FATA[0000] Get http:///var/run/docker.sock/v1.18/info: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Solution: You need some info from boot2docker
    &lt;ul&gt;
      &lt;li&gt;Run this to get the 3 needed shell environment variables:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boot2docker shellinit
&lt;span class=&quot;c&quot;&gt;# Copy &amp;amp; paste the exports into the current shell, &amp;amp; retry $(docker info)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;get-docker-server-ip-address&quot;&gt;Get Docker Server IP Address&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boot2docker ip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Now your app on port 3000 is available at something like: http://$(boot2docker ip):3000/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;boot2docker-quick-start-for-os-x&quot;&gt;Boot2Docker Quick Start for OS X&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;In a terminal on your &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; able Mac:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install boot2docker
boot2docker init
boot2docker up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="docker" /><category term="boot2docker" /><category term="devops" /><summary type="html">Overview Updates November 2015 Boot2Docker To everyone on OSX or Windows: Don’t let Boot2docker leave you with the impression that Docker sucks! It’s really just your antique OS. Docker is amazing, period. However it’s rough-around-the-edges, hackey utility, boot2docker - for OS X, Windows and old Linux Kernels - leaves a lot to be desired. Issues Boot2docker causes 99/100 headaches compared with using a native docker install locally. I should concede that it wraps several other complicated/flakey technologies: VirtualBox, x-platform Folder Sharing, and also the docker cli command runs in a network-client mode so, file copying, builds etc take a long time vs. running a native docker server. ============= Docker can currently only run natively on a Linux Kernel 3.4+ - and the current boot2docker vm actually runs v4. Bottom Line: Install the Latest Debian (w/ xfce or MATE) on your Mac/Windows box, … c’mon those games aren’t helping your code… Boot2docker Key Commands When you get error: ‘FATA[0000]’ Full error message: FATA[0000] Get http:///var/run/docker.sock/v1.18/info: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS? Solution: You need some info from boot2docker Run this to get the 3 needed shell environment variables: boot2docker shellinit # Copy &amp;amp; paste the exports into the current shell, &amp;amp; retry $(docker info) Get Docker Server IP Address boot2docker ip Now your app on port 3000 is available at something like: http://$(boot2docker ip):3000/ Boot2Docker Quick Start for OS X In a terminal on your brew able Mac: brew install boot2docker boot2docker init boot2docker up</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-10.jpg%22,%20%22credit%22=%3Enil%7D" /></entry><entry><title type="html">JavaScript Magic</title><link href="http://localhost:4000/2015/06/06/javascript-scope-magic/" rel="alternate" type="text/html" title="JavaScript Magic" /><published>2015-06-06T00:00:00-06:00</published><updated>2015-06-06T00:00:00-06:00</updated><id>http://localhost:4000/2015/06/06/javascript-scope-magic</id><content type="html" xml:base="http://localhost:4000/2015/06/06/javascript-scope-magic/">&lt;h3 id=&quot;-work-in-progress-includes-future-javascript-article-ideas-&quot;&gt;[ Work-in-progress, Includes Future JavaScript Article Ideas ]&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;This post is geared to modern browsers and Node.JS/iojs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;imperative-vs-recursive-vs-functional&quot;&gt;Imperative vs. Recursive vs. Functional&lt;/h1&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// Imperative: The Fastest ( + very simple, no new pointers or excess allocs ):&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Recursive: (FIREFOX or BABELJS Only) ES6 function definition with&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  parameter defaults used to set initial (internal/recursive) values&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Text-book-Bad Example - poor function scope w/ multiple mutable external values&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Bad&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Bad: inner recursive function not needed, hint: variables used are from parent function scope&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;promises-awesome&quot;&gt;Promises: Awesome!&lt;/h1&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// Example Using bluebird Promises and it's&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bluebird'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promisifyAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promisifyAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'less'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;writeFileData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeFileAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/tmp/output.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Bluebird makes something like this perhaps uncomfortably simple and succinct:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./style.less'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Call promisified readFile()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// Hand off to less.render&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeFileData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// Function to recieve the css contents (1st parameter)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;While, native ES6 Promises are great, I prefer the robust &lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md&quot;&gt;Bluebird Promise Library&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Library or not, modern browsers have supported Promise for years.&lt;/li&gt;
  &lt;li&gt;Promises can be utilized without crazy patterns - implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;deferred&lt;/code&gt; is preferable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;$q just sucks&lt;/strong&gt; just use bluebird, see above.&lt;/li&gt;
  &lt;li&gt;Worth mentioning: Bluebirds Benchmarks are best-case tests, so take note if doing crazy fancy promise chains&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;java-vs-javascript&quot;&gt;Java vs JavaScript&lt;/h1&gt;

&lt;h2 id=&quot;rate-limiting--debouncing--throttling&quot;&gt;Rate Limiting / Debouncing / Throttling&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;In JavaScript &lt;a href=&quot;http://davidwalsh.name/essential-javascript-functions&quot;&gt;David Walsh implemented debounce&lt;/a&gt; in less than 20 lines!&lt;/li&gt;
  &lt;li&gt;In Java, JDebounce, an library which is a lot more complicated, at ~500+ lines.&lt;/li&gt;
  &lt;li&gt;_ Comparing the two: _&lt;/li&gt;
  &lt;li&gt;The JavaScript is fast &amp;amp; uses first-class functions to achieve brilliant simplicity.&lt;/li&gt;
  &lt;li&gt;Whereas the Java has many more moving parts, annotations are used to apply behaviour at compile-time, and there’s a ton of XML, just for funsies!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;inversion-of-control-techniques&quot;&gt;Inversion of Control Techniques&lt;/h1&gt;

&lt;p&gt;Work-in-progress&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="programming" /><category term="performance" /><category term="patterns" /><summary type="html">[ Work-in-progress, Includes Future JavaScript Article Ideas ] This post is geared to modern browsers and Node.JS/iojs. Imperative vs. Recursive vs. Functional // Imperative: The Fastest ( + very simple, no new pointers or excess allocs ): function fib(n) { var a = 1, b = 1, c = 0; for(var i = 1; i &amp;lt; n-1; ++i) { c = a + b; a = b; b = c; } return b; } // Recursive: (FIREFOX or BABELJS Only) ES6 function definition with // parameter defaults used to set initial (internal/recursive) values function fib(n, current=0, a=1, b=1, c=0) { current++; c = a + b; a = b; b = c; return current &amp;gt;= n ? b : fib(n, current, a, b, c); } // Text-book-Bad Example - poor function scope w/ multiple mutable external values function fib(n) { if (!arr) { var arr = [1,1]; n=n-2; };// Bad if (n===-1) {return [arr[0]];} if (n===0) {return arr;} var proc = function() { --n; arr.push(arr[arr.length-1] + arr[arr.length-2]); return (n===0 ? arr : proc()); // Bad: inner recursive function not needed, hint: variables used are from parent function scope }; var ans = proc(); return ans[ans.length-1]; } Promises: Awesome! // Example Using bluebird Promises and it's var Promise = require('bluebird'), fs = Promise.promisifyAll(require('fs')), less = Promise.promisifyAll(require('less')); function writeFileData(data) { return fs.writeFileAsync('/tmp/output.css', data); } // Bluebird makes something like this perhaps uncomfortably simple and succinct: fs.readFileAsync('./style.less') // Call promisified readFile() .then(less.renderAsync) // Hand off to less.render .then(writeFileData); // Function to recieve the css contents (1st parameter) While, native ES6 Promises are great, I prefer the robust Bluebird Promise Library. Library or not, modern browsers have supported Promise for years. Promises can be utilized without crazy patterns - implicit deferred is preferable. $q just sucks just use bluebird, see above. Worth mentioning: Bluebirds Benchmarks are best-case tests, so take note if doing crazy fancy promise chains Java vs JavaScript Rate Limiting / Debouncing / Throttling In JavaScript David Walsh implemented debounce in less than 20 lines! In Java, JDebounce, an library which is a lot more complicated, at ~500+ lines. _ Comparing the two: _ The JavaScript is fast &amp;amp; uses first-class functions to achieve brilliant simplicity. Whereas the Java has many more moving parts, annotations are used to apply behaviour at compile-time, and there’s a ton of XML, just for funsies! Inversion of Control Techniques Work-in-progress</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22abstract-7.jpg%22,%20%22credit%22=%3Enil%7D" /></entry></feed>